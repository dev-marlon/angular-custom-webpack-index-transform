const fs = require('fs');
const inquirer = require('inquirer');

const util = require('util');

const readdirAsync = util.promisify(fs.readdir);
const readFileAsync = util.promisify(fs.readFile);

const config = require('rc')('indextransform');

/**
 * @param {{
 *  configuration?: string,
 *  project: string,
 *  target: string,
 * }} targetOptions
 * @param {string} indexHtml - The original index.html content (generated by Angular CLI)
 * @return {Promise<string>}
 */
module.exports = (targetOptions, indexHtml) => {
    if (config.templatePath === undefined) {
        return Promise.resolve(indexHtml);
    }

    if (process.env.ANGULAR_CUSTOM_WEBPACK_INDEX_TRANSFORM_TEMPLATE) {
        return retrieveTemplateFileContent(
            process.env.ANGULAR_CUSTOM_WEBPACK_INDEX_TRANSFORM_TEMPLATE
        );
    }

    return retrieveTemplateFiles().then((templateFiles) => {
        if (templateFiles === null) {
            return indexHtml;
        }

        if (Array.isArray(templateFiles) && templateFiles.length === 0) {
            return indexHtml;
        }

        console.log('\n');

        return inquirer
            .prompt([
                {
                    type: 'list',
                    name: 'template',
                    message: 'Choose template',
                    choices: templateFiles,
                },
            ])
            .then((selection) => {
                process.env.ANGULAR_CUSTOM_WEBPACK_INDEX_TRANSFORM_TEMPLATE = selection.template;

                return retrieveTemplateFileContent(selection.template);
            })
            .catch((error) => {
                console.log(error);
                return indexHtml;
            });
    });
};

/**
 * @return {Promise<string[]>}
 */
const retrieveTemplateFiles = async () => {
    return await readdirAsync(`${process.cwd()}${config.templatePath}`);
};

/**
 * @param {string} templateFile
 * @return {Promise<string>}
 */
const retrieveTemplateFileContent = async templateFile => {
    return await readFileAsync(
        `${process.cwd()}${config.templatePath}${templateFile}`,
        'utf8'
    );
};
